Today we are looking at more advanced topics in github
	- Review of pull method
	- Merge conflicts
	- Branches
	- Oh sh*t git

README.md files:
	- Markdown files
	- will be rendered below all of the files in a repository
	- should be description of project
		- installation instructions
		- use cases
		- dependancies
	- Example file in repository

Pull:
	- When you move changes from remote to local you have to pull them
	- Command is 'git pull'
	- You should never have to force pull
	- Pull THEN push, never the other way around. If you do, then it will create a merge conflict

Merge conflicts:
	- Merge conflicts happen when
	- Text is inserted into file where merge conflic exists
		- From head to ====== it tells the user what it looks like on the local commit
		- From ===== to >>>>> it tells the user that it looks like on the remote commit
		- Jumble of numbers is unique hash that refereneces the location in the remote
	- You have to decide which one you want to keep then commit and push the changes to resolve the merge conflicts
Branches:
	- master is the default branch for a Github repo
	- A branch is an alternate timeline of commits to master where you can safely develop new features, fix bugs, try new things,
	  without fear of breaking a working master code
		- For collabrative projects each person can be editing the master document and make their own changes (leads to a lot of merge conflicts when merging back to master)
	- Run git branch to see all branches on a repo
	- Run git checkout <branch> to switch to a specific branch
	- To push a branch to the repo use: git push -u orgin(remote) dev(branchname)  (same as adding a remote repo)
	- To merge a branc h back into master, checkout master, then run: git merge <branchname>

Oh Sh*t Git:
	- git reflog: shows you everything you've done in git
	- git reset --hard: hard reset. Jumps you back one commit and starts you there
	- git clean -df: clears up all files that are not under verion control that have been added to the repo

